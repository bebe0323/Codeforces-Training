{"ast":null,"code":"var _jsxFileName = \"/import/kamen/7/z5458085/Documents/Codeforces-Training/client/src/pages/Solving.js\",\n  _s = $RefreshSig$();\nimport { useContext, useEffect, useState } from \"react\";\nimport { UserContext } from \"../UserContext\";\nimport { Navigate } from \"react-router-dom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Solving() {\n  _s();\n  const [problem, setProblem] = useState(null);\n  const [time, setTime] = useState(0);\n  const [redirect, setRedirect] = useState(false);\n  useEffect(() => {\n    async function fetchData() {\n      try {\n        const response = await fetch(`http://localhost:4000/currentSolving`, {\n          method: 'GET',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          credentials: 'include'\n        });\n        if (response.status === 200) {\n          response.json().then(data => {\n            setProblem(data);\n            const startedDate = new Date(data.startedDate);\n            const currentDate = new Date();\n            const difference = currentDate - startedDate;\n            setTime(Math.floor(difference / 1000));\n          });\n        }\n      } catch (error) {\n        console.log('Error fetching data: ', error);\n      }\n    }\n    fetchData();\n  }, []);\n  useEffect(() => {\n    // Create an interval that increments the time every second\n    const interval = setInterval(() => {\n      setTime(time => time + 1);\n    }, 1000);\n\n    // Clean up the interval when the component unmounts\n    return () => clearInterval(interval);\n  }, []);\n  async function handleSolved() {\n    // POST/PUT body\n    const response = await fetch('http://localhost:4000/problemUpdate', {\n      method: 'PUT',\n      body: JSON.stringify({\n        problemId: problem.problemId,\n        preStatus: 'solving',\n        status: 'solved'\n      }),\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      credentials: 'include'\n    });\n    if (response.status === 200) {\n      setRedirect(true);\n    } else {\n      response.json().then(data => alert(data));\n    }\n  }\n  if (redirect) {\n    return /*#__PURE__*/_jsxDEV(Navigate, {\n      to: '/solvedList'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 12\n    }, this);\n  }\n  if (problem === null) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"No active solving problem\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }, this);\n  } else {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: /*#__PURE__*/_jsxDEV(\"a\", {\n          target: \"_blank\",\n          href: problem.link,\n          children: problem.title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Time: \", time, \" seconds\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleSolved,\n        children: \"Solved\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }, this);\n  }\n}\n_s(Solving, \"yah0thxaFxYmVvxr4BTIDVtxQV8=\");\n_c = Solving;\nvar _c;\n$RefreshReg$(_c, \"Solving\");","map":{"version":3,"names":["useContext","useEffect","useState","UserContext","Navigate","jsxDEV","_jsxDEV","Solving","_s","problem","setProblem","time","setTime","redirect","setRedirect","fetchData","response","fetch","method","headers","credentials","status","json","then","data","startedDate","Date","currentDate","difference","Math","floor","error","console","log","interval","setInterval","clearInterval","handleSolved","body","JSON","stringify","problemId","preStatus","alert","to","fileName","_jsxFileName","lineNumber","columnNumber","children","target","href","link","title","onClick","_c","$RefreshReg$"],"sources":["/import/kamen/7/z5458085/Documents/Codeforces-Training/client/src/pages/Solving.js"],"sourcesContent":["import { useContext, useEffect, useState } from \"react\";\nimport { UserContext } from \"../UserContext\";\nimport { Navigate } from \"react-router-dom\";\n\n\nexport default function Solving() {\n  const [problem, setProblem] = useState(null);\n  const [time, setTime] = useState(0);\n  const [redirect, setRedirect] = useState(false);\n\n  useEffect(() => {\n    async function fetchData() {\n      try {\n        const response = await fetch(`http://localhost:4000/currentSolving`, {\n          method: 'GET',\n          headers: { 'Content-Type': 'application/json' },\n          credentials: 'include',\n        });\n        if (response.status === 200) {\n          response.json()\n            .then(data => {\n              setProblem(data);\n              const startedDate = new Date(data.startedDate);\n              const currentDate = new Date();\n              const difference = currentDate - startedDate;\n              setTime(Math.floor((difference / 1000)));\n            })\n        }\n      } catch(error) {\n        console.log('Error fetching data: ', error);\n      }\n    }\n    fetchData();\n  }, []);\n\n  useEffect(() => {\n    // Create an interval that increments the time every second\n    const interval = setInterval(() => {\n      setTime((time) => time + 1);\n    }, 1000);\n\n    // Clean up the interval when the component unmounts\n    return () => clearInterval(interval);\n  }, []);\n\n  async function handleSolved() {\n    // POST/PUT body\n    const response = await fetch('http://localhost:4000/problemUpdate', {\n      method: 'PUT',\n      body: JSON.stringify({\n        problemId: problem.problemId,\n        preStatus: 'solving',\n        status: 'solved'\n      }),\n      headers: { 'Content-Type': 'application/json' },\n      credentials: 'include',\n    });\n    if (response.status === 200) {\n      setRedirect(true);\n    } else {\n      response.json()\n        .then(data => alert(data));\n    }\n  }\n  if(redirect) {\n    return <Navigate to={'/solvedList'} />;\n  }\n  \n  if (problem === null) {\n    return (\n      <div>\n        No active solving problem\n      </div>\n    )\n  } else {\n    return (\n      <div>\n        <h1><a target=\"_blank\" href={problem.link}>{problem.title}</a></h1>\n        <p>Time: {time} seconds</p>\n        <button onClick={handleSolved}>Solved</button>\n      </div>\n    );\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}